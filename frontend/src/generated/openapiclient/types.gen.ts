// This file is auto-generated by @hey-api/openapi-ts

/**
 * Body_login_for_access_token_token_post
 */
export type BodyLoginForAccessTokenTokenPost = {
    /**
     * Grant Type
     */
    grant_type?: string | null;
    /**
     * Username
     */
    username: string;
    /**
     * Password
     */
    password: string;
    /**
     * Scope
     */
    scope?: string;
    /**
     * Client Id
     */
    client_id?: string | null;
    /**
     * Client Secret
     */
    client_secret?: string | null;
};

/**
 * HTTPValidationError
 */
export type HttpValidationError = {
    /**
     * Detail
     */
    detail?: Array<ValidationError>;
};

/**
 * Message
 */
export type Message = {
    /**
     * Id
     */
    id: number;
    /**
     * User Id
     */
    user_id: number | null;
    /**
     * Username
     */
    username: string | null;
    /**
     * Content
     */
    content: string;
    /**
     * Created At
     */
    created_at: string;
};

/**
 * MessageUpdate
 */
export type MessageUpdate = {
    /**
     * Content
     */
    content: string;
};

/**
 * MessagesPage
 */
export type MessagesPage = {
    /**
     * Items
     */
    items: Array<Message>;
    /**
     * Total
     */
    total: number;
    /**
     * Limit
     */
    limit: number;
    /**
     * Offset
     */
    offset: number;
    /**
     * Has More
     */
    has_more: boolean;
    /**
     * Next Offset
     */
    next_offset?: number | null;
};

/**
 * PresenceState
 */
export type PresenceState = {
    /**
     * Room Id
     */
    room_id: number;
    /**
     * Room
     */
    room: string;
    /**
     * Users
     */
    users: Array<string>;
    /**
     * Count
     */
    count: number;
};

/**
 * RefreshRequest
 */
export type RefreshRequest = {
    /**
     * Refresh Token
     */
    refresh_token: string;
};

/**
 * Room
 */
export type Room = {
    /**
     * Id
     */
    id: number;
    /**
     * Name
     */
    name: string;
    /**
     * Is Private
     */
    is_private: boolean;
    /**
     * Created At
     */
    created_at: string;
};

/**
 * RoomCreate
 */
export type RoomCreate = {
    /**
     * Name
     */
    name: string;
    /**
     * Is Private
     */
    is_private?: boolean;
};

/**
 * RoomMember
 */
export type RoomMember = {
    /**
     * User Id
     */
    user_id: number;
    /**
     * Username
     */
    username: string;
    /**
     * Is Moderator
     */
    is_moderator: boolean;
    /**
     * Is Banned
     */
    is_banned: boolean;
    /**
     * Is Muted
     */
    is_muted: boolean;
    /**
     * Joined At
     */
    joined_at: string;
};

/**
 * RoomMembersPage
 */
export type RoomMembersPage = {
    /**
     * Items
     */
    items: Array<RoomMember>;
    /**
     * Total
     */
    total: number;
    /**
     * Limit
     */
    limit: number;
    /**
     * Offset
     */
    offset: number;
    /**
     * Has More
     */
    has_more: boolean;
    /**
     * Next Offset
     */
    next_offset?: number | null;
};

/**
 * RoomUpdate
 */
export type RoomUpdate = {
    /**
     * Name
     */
    name?: string | null;
    /**
     * Is Private
     */
    is_private?: boolean | null;
};

/**
 * RoomsPage
 */
export type RoomsPage = {
    /**
     * Items
     */
    items: Array<Room>;
    /**
     * Total
     */
    total: number;
    /**
     * Limit
     */
    limit: number;
    /**
     * Offset
     */
    offset: number;
    /**
     * Has More
     */
    has_more: boolean;
    /**
     * Next Offset
     */
    next_offset?: number | null;
};

/**
 * TokenPair
 */
export type TokenPair = {
    /**
     * Access Token
     */
    access_token: string;
    /**
     * Refresh Token
     */
    refresh_token: string;
    /**
     * Token Type
     */
    token_type?: string;
};

/**
 * User
 */
export type User = {
    /**
     * Username
     */
    username: string;
    /**
     * Email
     */
    email?: string | null;
    /**
     * Full Name
     */
    full_name?: string | null;
    /**
     * Disabled
     */
    disabled?: boolean | null;
};

/**
 * ValidationError
 */
export type ValidationError = {
    /**
     * Location
     */
    loc: Array<string | number>;
    /**
     * Message
     */
    msg: string;
    /**
     * Error Type
     */
    type: string;
};

export type HealthHealthGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/health';
};

export type HealthHealthGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type RegisterUserRegisterPostData = {
    body?: never;
    path?: never;
    query: {
        /**
         * Username
         */
        username: string;
        /**
         * Password
         */
        password: string;
        /**
         * Email
         */
        email?: string | null;
        /**
         * Full Name
         */
        full_name?: string | null;
    };
    url: '/register';
};

export type RegisterUserRegisterPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RegisterUserRegisterPostError = RegisterUserRegisterPostErrors[keyof RegisterUserRegisterPostErrors];

export type RegisterUserRegisterPostResponses = {
    /**
     * Successful Response
     */
    201: User;
};

export type RegisterUserRegisterPostResponse = RegisterUserRegisterPostResponses[keyof RegisterUserRegisterPostResponses];

export type LoginForAccessTokenTokenPostData = {
    body: BodyLoginForAccessTokenTokenPost;
    path?: never;
    query?: never;
    url: '/token';
};

export type LoginForAccessTokenTokenPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type LoginForAccessTokenTokenPostError = LoginForAccessTokenTokenPostErrors[keyof LoginForAccessTokenTokenPostErrors];

export type LoginForAccessTokenTokenPostResponses = {
    /**
     * Successful Response
     */
    200: TokenPair;
};

export type LoginForAccessTokenTokenPostResponse = LoginForAccessTokenTokenPostResponses[keyof LoginForAccessTokenTokenPostResponses];

export type RefreshTokensRefreshPostData = {
    body: RefreshRequest;
    path?: never;
    query?: never;
    url: '/refresh';
};

export type RefreshTokensRefreshPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RefreshTokensRefreshPostError = RefreshTokensRefreshPostErrors[keyof RefreshTokensRefreshPostErrors];

export type RefreshTokensRefreshPostResponses = {
    /**
     * Successful Response
     */
    200: TokenPair;
};

export type RefreshTokensRefreshPostResponse = RefreshTokensRefreshPostResponses[keyof RefreshTokensRefreshPostResponses];

export type LogoutLogoutPostData = {
    body: RefreshRequest;
    path?: never;
    query?: never;
    url: '/logout';
};

export type LogoutLogoutPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type LogoutLogoutPostError = LogoutLogoutPostErrors[keyof LogoutLogoutPostErrors];

export type LogoutLogoutPostResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type LogoutLogoutPostResponse = LogoutLogoutPostResponses[keyof LogoutLogoutPostResponses];

export type ReadUsersMeUsersMeGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/users/me';
};

export type ReadUsersMeUsersMeGetResponses = {
    /**
     * Successful Response
     */
    200: User;
};

export type ReadUsersMeUsersMeGetResponse = ReadUsersMeUsersMeGetResponses[keyof ReadUsersMeUsersMeGetResponses];

export type ListUsersUsersGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Limit
         */
        limit?: number;
        /**
         * Offset
         */
        offset?: number;
        /**
         * Order
         */
        order?: 'asc' | 'desc';
    };
    url: '/users/';
};

export type ListUsersUsersGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListUsersUsersGetError = ListUsersUsersGetErrors[keyof ListUsersUsersGetErrors];

export type ListUsersUsersGetResponses = {
    /**
     * Response List Users Users  Get
     * Successful Response
     */
    200: Array<User>;
};

export type ListUsersUsersGetResponse = ListUsersUsersGetResponses[keyof ListUsersUsersGetResponses];

export type GetUserUsersUsernameGetData = {
    body?: never;
    path: {
        /**
         * Username
         */
        username: string;
    };
    query?: never;
    url: '/users/{username}';
};

export type GetUserUsersUsernameGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetUserUsersUsernameGetError = GetUserUsersUsernameGetErrors[keyof GetUserUsersUsernameGetErrors];

export type GetUserUsersUsernameGetResponses = {
    /**
     * Successful Response
     */
    200: User;
};

export type GetUserUsersUsernameGetResponse = GetUserUsersUsernameGetResponses[keyof GetUserUsersUsernameGetResponses];

export type ListRoomsRoomsGetData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Limit
         */
        limit?: number;
        /**
         * Offset
         */
        offset?: number;
        /**
         * Order
         */
        order?: string;
    };
    url: '/rooms/';
};

export type ListRoomsRoomsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListRoomsRoomsGetError = ListRoomsRoomsGetErrors[keyof ListRoomsRoomsGetErrors];

export type ListRoomsRoomsGetResponses = {
    /**
     * Successful Response
     */
    200: RoomsPage;
};

export type ListRoomsRoomsGetResponse = ListRoomsRoomsGetResponses[keyof ListRoomsRoomsGetResponses];

export type CreateRoomRoomsPostData = {
    body: RoomCreate;
    path?: never;
    query?: never;
    url: '/rooms/';
};

export type CreateRoomRoomsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateRoomRoomsPostError = CreateRoomRoomsPostErrors[keyof CreateRoomRoomsPostErrors];

export type CreateRoomRoomsPostResponses = {
    /**
     * Successful Response
     */
    201: Room;
};

export type CreateRoomRoomsPostResponse = CreateRoomRoomsPostResponses[keyof CreateRoomRoomsPostResponses];

export type DeleteRoomRoomsRoomIdDeleteData = {
    body?: never;
    path: {
        /**
         * Room Id
         */
        room_id: number;
    };
    query?: never;
    url: '/rooms/{room_id}';
};

export type DeleteRoomRoomsRoomIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteRoomRoomsRoomIdDeleteError = DeleteRoomRoomsRoomIdDeleteErrors[keyof DeleteRoomRoomsRoomIdDeleteErrors];

export type DeleteRoomRoomsRoomIdDeleteResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type DeleteRoomRoomsRoomIdDeleteResponse = DeleteRoomRoomsRoomIdDeleteResponses[keyof DeleteRoomRoomsRoomIdDeleteResponses];

export type GetRoomRoomsRoomIdGetData = {
    body?: never;
    path: {
        /**
         * Room Id
         */
        room_id: number;
    };
    query?: never;
    url: '/rooms/{room_id}';
};

export type GetRoomRoomsRoomIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetRoomRoomsRoomIdGetError = GetRoomRoomsRoomIdGetErrors[keyof GetRoomRoomsRoomIdGetErrors];

export type GetRoomRoomsRoomIdGetResponses = {
    /**
     * Successful Response
     */
    200: Room;
};

export type GetRoomRoomsRoomIdGetResponse = GetRoomRoomsRoomIdGetResponses[keyof GetRoomRoomsRoomIdGetResponses];

export type UpdateRoomRoomsRoomIdPatchData = {
    body: RoomUpdate;
    path: {
        /**
         * Room Id
         */
        room_id: number;
    };
    query?: never;
    url: '/rooms/{room_id}';
};

export type UpdateRoomRoomsRoomIdPatchErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UpdateRoomRoomsRoomIdPatchError = UpdateRoomRoomsRoomIdPatchErrors[keyof UpdateRoomRoomsRoomIdPatchErrors];

export type UpdateRoomRoomsRoomIdPatchResponses = {
    /**
     * Successful Response
     */
    200: Room;
};

export type UpdateRoomRoomsRoomIdPatchResponse = UpdateRoomRoomsRoomIdPatchResponses[keyof UpdateRoomRoomsRoomIdPatchResponses];

export type ListRoomMembersRoomsRoomIdMembersGetData = {
    body?: never;
    path: {
        /**
         * Room Id
         */
        room_id: number;
    };
    query?: {
        /**
         * Limit
         */
        limit?: number;
        /**
         * Offset
         */
        offset?: number;
    };
    url: '/rooms/{room_id}/members';
};

export type ListRoomMembersRoomsRoomIdMembersGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListRoomMembersRoomsRoomIdMembersGetError = ListRoomMembersRoomsRoomIdMembersGetErrors[keyof ListRoomMembersRoomsRoomIdMembersGetErrors];

export type ListRoomMembersRoomsRoomIdMembersGetResponses = {
    /**
     * Successful Response
     */
    200: RoomMembersPage;
};

export type ListRoomMembersRoomsRoomIdMembersGetResponse = ListRoomMembersRoomsRoomIdMembersGetResponses[keyof ListRoomMembersRoomsRoomIdMembersGetResponses];

export type JoinRoomRoomsRoomIdJoinPostData = {
    body?: never;
    path: {
        /**
         * Room Id
         */
        room_id: number;
    };
    query?: never;
    url: '/rooms/{room_id}/join';
};

export type JoinRoomRoomsRoomIdJoinPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type JoinRoomRoomsRoomIdJoinPostError = JoinRoomRoomsRoomIdJoinPostErrors[keyof JoinRoomRoomsRoomIdJoinPostErrors];

export type JoinRoomRoomsRoomIdJoinPostResponses = {
    /**
     * Successful Response
     */
    201: RoomMember;
};

export type JoinRoomRoomsRoomIdJoinPostResponse = JoinRoomRoomsRoomIdJoinPostResponses[keyof JoinRoomRoomsRoomIdJoinPostResponses];

export type LeaveRoomRoomsRoomIdLeaveDeleteData = {
    body?: never;
    path: {
        /**
         * Room Id
         */
        room_id: number;
    };
    query?: never;
    url: '/rooms/{room_id}/leave';
};

export type LeaveRoomRoomsRoomIdLeaveDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type LeaveRoomRoomsRoomIdLeaveDeleteError = LeaveRoomRoomsRoomIdLeaveDeleteErrors[keyof LeaveRoomRoomsRoomIdLeaveDeleteErrors];

export type LeaveRoomRoomsRoomIdLeaveDeleteResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type LeaveRoomRoomsRoomIdLeaveDeleteResponse = LeaveRoomRoomsRoomIdLeaveDeleteResponses[keyof LeaveRoomRoomsRoomIdLeaveDeleteResponses];

export type ListRoomMessagesRoomsRoomIdMessagesGetData = {
    body?: never;
    path: {
        /**
         * Room Id
         */
        room_id: number;
    };
    query?: {
        /**
         * Limit
         */
        limit?: number;
        /**
         * Offset
         */
        offset?: number;
    };
    url: '/rooms/{room_id}/messages';
};

export type ListRoomMessagesRoomsRoomIdMessagesGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListRoomMessagesRoomsRoomIdMessagesGetError = ListRoomMessagesRoomsRoomIdMessagesGetErrors[keyof ListRoomMessagesRoomsRoomIdMessagesGetErrors];

export type ListRoomMessagesRoomsRoomIdMessagesGetResponses = {
    /**
     * Successful Response
     */
    200: MessagesPage;
};

export type ListRoomMessagesRoomsRoomIdMessagesGetResponse = ListRoomMessagesRoomsRoomIdMessagesGetResponses[keyof ListRoomMessagesRoomsRoomIdMessagesGetResponses];

export type DeleteMessageRoomsRoomIdMessagesMessageIdDeleteData = {
    body?: never;
    path: {
        /**
         * Room Id
         */
        room_id: number;
        /**
         * Message Id
         */
        message_id: number;
    };
    query?: never;
    url: '/rooms/{room_id}/messages/{message_id}';
};

export type DeleteMessageRoomsRoomIdMessagesMessageIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DeleteMessageRoomsRoomIdMessagesMessageIdDeleteError = DeleteMessageRoomsRoomIdMessagesMessageIdDeleteErrors[keyof DeleteMessageRoomsRoomIdMessagesMessageIdDeleteErrors];

export type DeleteMessageRoomsRoomIdMessagesMessageIdDeleteResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type DeleteMessageRoomsRoomIdMessagesMessageIdDeleteResponse = DeleteMessageRoomsRoomIdMessagesMessageIdDeleteResponses[keyof DeleteMessageRoomsRoomIdMessagesMessageIdDeleteResponses];

export type EditMessageRoomsRoomIdMessagesMessageIdPatchData = {
    body: MessageUpdate;
    path: {
        /**
         * Room Id
         */
        room_id: number;
        /**
         * Message Id
         */
        message_id: number;
    };
    query?: never;
    url: '/rooms/{room_id}/messages/{message_id}';
};

export type EditMessageRoomsRoomIdMessagesMessageIdPatchErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type EditMessageRoomsRoomIdMessagesMessageIdPatchError = EditMessageRoomsRoomIdMessagesMessageIdPatchErrors[keyof EditMessageRoomsRoomIdMessagesMessageIdPatchErrors];

export type EditMessageRoomsRoomIdMessagesMessageIdPatchResponses = {
    /**
     * Successful Response
     */
    200: Message;
};

export type EditMessageRoomsRoomIdMessagesMessageIdPatchResponse = EditMessageRoomsRoomIdMessagesMessageIdPatchResponses[keyof EditMessageRoomsRoomIdMessagesMessageIdPatchResponses];

export type GetRoomByNameRoomsByNameRoomNameGetData = {
    body?: never;
    path: {
        /**
         * Room Name
         */
        room_name: string;
    };
    query?: never;
    url: '/rooms/by-name/{room_name}';
};

export type GetRoomByNameRoomsByNameRoomNameGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetRoomByNameRoomsByNameRoomNameGetError = GetRoomByNameRoomsByNameRoomNameGetErrors[keyof GetRoomByNameRoomsByNameRoomNameGetErrors];

export type GetRoomByNameRoomsByNameRoomNameGetResponses = {
    /**
     * Successful Response
     */
    200: Room;
};

export type GetRoomByNameRoomsByNameRoomNameGetResponse = GetRoomByNameRoomsByNameRoomNameGetResponses[keyof GetRoomByNameRoomsByNameRoomNameGetResponses];

export type GetRoomPresenceRoomsRoomIdPresenceGetData = {
    body?: never;
    path: {
        /**
         * Room Id
         */
        room_id: number;
    };
    query?: never;
    url: '/rooms/{room_id}/presence';
};

export type GetRoomPresenceRoomsRoomIdPresenceGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GetRoomPresenceRoomsRoomIdPresenceGetError = GetRoomPresenceRoomsRoomIdPresenceGetErrors[keyof GetRoomPresenceRoomsRoomIdPresenceGetErrors];

export type GetRoomPresenceRoomsRoomIdPresenceGetResponses = {
    /**
     * Successful Response
     */
    200: PresenceState;
};

export type GetRoomPresenceRoomsRoomIdPresenceGetResponse = GetRoomPresenceRoomsRoomIdPresenceGetResponses[keyof GetRoomPresenceRoomsRoomIdPresenceGetResponses];

export type ToggleModeratorRoomsRoomIdMembersTargetUserIdModeratorPostData = {
    body?: never;
    path: {
        /**
         * Room Id
         */
        room_id: number;
        /**
         * Target User Id
         */
        target_user_id: number;
    };
    query?: never;
    url: '/rooms/{room_id}/members/{target_user_id}/moderator';
};

export type ToggleModeratorRoomsRoomIdMembersTargetUserIdModeratorPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ToggleModeratorRoomsRoomIdMembersTargetUserIdModeratorPostError = ToggleModeratorRoomsRoomIdMembersTargetUserIdModeratorPostErrors[keyof ToggleModeratorRoomsRoomIdMembersTargetUserIdModeratorPostErrors];

export type ToggleModeratorRoomsRoomIdMembersTargetUserIdModeratorPostResponses = {
    /**
     * Successful Response
     */
    200: RoomMember;
};

export type ToggleModeratorRoomsRoomIdMembersTargetUserIdModeratorPostResponse = ToggleModeratorRoomsRoomIdMembersTargetUserIdModeratorPostResponses[keyof ToggleModeratorRoomsRoomIdMembersTargetUserIdModeratorPostResponses];

export type ToggleBanRoomsRoomIdMembersTargetUserIdBanPostData = {
    body?: never;
    path: {
        /**
         * Room Id
         */
        room_id: number;
        /**
         * Target User Id
         */
        target_user_id: number;
    };
    query?: never;
    url: '/rooms/{room_id}/members/{target_user_id}/ban';
};

export type ToggleBanRoomsRoomIdMembersTargetUserIdBanPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ToggleBanRoomsRoomIdMembersTargetUserIdBanPostError = ToggleBanRoomsRoomIdMembersTargetUserIdBanPostErrors[keyof ToggleBanRoomsRoomIdMembersTargetUserIdBanPostErrors];

export type ToggleBanRoomsRoomIdMembersTargetUserIdBanPostResponses = {
    /**
     * Successful Response
     */
    200: RoomMember;
};

export type ToggleBanRoomsRoomIdMembersTargetUserIdBanPostResponse = ToggleBanRoomsRoomIdMembersTargetUserIdBanPostResponses[keyof ToggleBanRoomsRoomIdMembersTargetUserIdBanPostResponses];

export type ToggleMuteRoomsRoomIdMembersTargetUserIdMutePostData = {
    body?: never;
    path: {
        /**
         * Room Id
         */
        room_id: number;
        /**
         * Target User Id
         */
        target_user_id: number;
    };
    query?: never;
    url: '/rooms/{room_id}/members/{target_user_id}/mute';
};

export type ToggleMuteRoomsRoomIdMembersTargetUserIdMutePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ToggleMuteRoomsRoomIdMembersTargetUserIdMutePostError = ToggleMuteRoomsRoomIdMembersTargetUserIdMutePostErrors[keyof ToggleMuteRoomsRoomIdMembersTargetUserIdMutePostErrors];

export type ToggleMuteRoomsRoomIdMembersTargetUserIdMutePostResponses = {
    /**
     * Successful Response
     */
    200: RoomMember;
};

export type ToggleMuteRoomsRoomIdMembersTargetUserIdMutePostResponse = ToggleMuteRoomsRoomIdMembersTargetUserIdMutePostResponses[keyof ToggleMuteRoomsRoomIdMembersTargetUserIdMutePostResponses];

export type ClientOptions = {
    baseURL: 'http://127.0.0.1:8000' | (string & {});
};