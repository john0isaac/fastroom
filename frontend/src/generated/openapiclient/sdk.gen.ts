// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, urlSearchParamsBodySerializer } from './client';
import type { HealthHealthGetData, HealthHealthGetResponses, RegisterUserRegisterPostData, RegisterUserRegisterPostResponses, RegisterUserRegisterPostErrors, LoginForAccessTokenTokenPostData, LoginForAccessTokenTokenPostResponses, LoginForAccessTokenTokenPostErrors, RefreshTokensRefreshPostData, RefreshTokensRefreshPostResponses, RefreshTokensRefreshPostErrors, LogoutLogoutPostData, LogoutLogoutPostResponses, LogoutLogoutPostErrors, ReadUsersMeUsersMeGetData, ReadUsersMeUsersMeGetResponses, ListUsersUsersGetData, ListUsersUsersGetResponses, ListUsersUsersGetErrors, GetUserUsersUsernameGetData, GetUserUsersUsernameGetResponses, GetUserUsersUsernameGetErrors, ListRoomsRoomsGetData, ListRoomsRoomsGetResponses, ListRoomsRoomsGetErrors, CreateRoomRoomsPostData, CreateRoomRoomsPostResponses, CreateRoomRoomsPostErrors, DeleteRoomRoomsRoomIdDeleteData, DeleteRoomRoomsRoomIdDeleteResponses, DeleteRoomRoomsRoomIdDeleteErrors, GetRoomRoomsRoomIdGetData, GetRoomRoomsRoomIdGetResponses, GetRoomRoomsRoomIdGetErrors, UpdateRoomRoomsRoomIdPatchData, UpdateRoomRoomsRoomIdPatchResponses, UpdateRoomRoomsRoomIdPatchErrors, ListRoomMembersRoomsRoomIdMembersGetData, ListRoomMembersRoomsRoomIdMembersGetResponses, ListRoomMembersRoomsRoomIdMembersGetErrors, JoinRoomRoomsRoomIdJoinPostData, JoinRoomRoomsRoomIdJoinPostResponses, JoinRoomRoomsRoomIdJoinPostErrors, LeaveRoomRoomsRoomIdLeaveDeleteData, LeaveRoomRoomsRoomIdLeaveDeleteResponses, LeaveRoomRoomsRoomIdLeaveDeleteErrors, ListRoomMessagesRoomsRoomIdMessagesGetData, ListRoomMessagesRoomsRoomIdMessagesGetResponses, ListRoomMessagesRoomsRoomIdMessagesGetErrors, DeleteMessageRoomsRoomIdMessagesMessageIdDeleteData, DeleteMessageRoomsRoomIdMessagesMessageIdDeleteResponses, DeleteMessageRoomsRoomIdMessagesMessageIdDeleteErrors, EditMessageRoomsRoomIdMessagesMessageIdPatchData, EditMessageRoomsRoomIdMessagesMessageIdPatchResponses, EditMessageRoomsRoomIdMessagesMessageIdPatchErrors, GetRoomByNameRoomsByNameRoomNameGetData, GetRoomByNameRoomsByNameRoomNameGetResponses, GetRoomByNameRoomsByNameRoomNameGetErrors, GetRoomPresenceRoomsRoomIdPresenceGetData, GetRoomPresenceRoomsRoomIdPresenceGetResponses, GetRoomPresenceRoomsRoomIdPresenceGetErrors, ToggleModeratorRoomsRoomIdMembersTargetUserIdModeratorPostData, ToggleModeratorRoomsRoomIdMembersTargetUserIdModeratorPostResponses, ToggleModeratorRoomsRoomIdMembersTargetUserIdModeratorPostErrors, ToggleBanRoomsRoomIdMembersTargetUserIdBanPostData, ToggleBanRoomsRoomIdMembersTargetUserIdBanPostResponses, ToggleBanRoomsRoomIdMembersTargetUserIdBanPostErrors, ToggleMuteRoomsRoomIdMembersTargetUserIdMutePostData, ToggleMuteRoomsRoomIdMembersTargetUserIdMutePostResponses, ToggleMuteRoomsRoomIdMembersTargetUserIdMutePostErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Health
 */
export const healthHealthGet = <ThrowOnError extends boolean = false>(options?: Options<HealthHealthGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<HealthHealthGetResponses, unknown, ThrowOnError>({
        responseType: 'json',
        url: '/health',
        ...options
    });
};

/**
 * Register User
 */
export const registerUserRegisterPost = <ThrowOnError extends boolean = false>(options: Options<RegisterUserRegisterPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RegisterUserRegisterPostResponses, RegisterUserRegisterPostErrors, ThrowOnError>({
        responseType: 'json',
        url: '/register',
        ...options
    });
};

/**
 * Login For Access Token
 */
export const loginForAccessTokenTokenPost = <ThrowOnError extends boolean = false>(options: Options<LoginForAccessTokenTokenPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<LoginForAccessTokenTokenPostResponses, LoginForAccessTokenTokenPostErrors, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        responseType: 'json',
        url: '/token',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options.headers
        }
    });
};

/**
 * Refresh Tokens
 */
export const refreshTokensRefreshPost = <ThrowOnError extends boolean = false>(options: Options<RefreshTokensRefreshPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RefreshTokensRefreshPostResponses, RefreshTokensRefreshPostErrors, ThrowOnError>({
        responseType: 'json',
        url: '/refresh',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Logout
 * Revoke a refresh token (best effort) and end session. Access tokens remain stateless.
 */
export const logoutLogoutPost = <ThrowOnError extends boolean = false>(options: Options<LogoutLogoutPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<LogoutLogoutPostResponses, LogoutLogoutPostErrors, ThrowOnError>({
        url: '/logout',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Read Users Me
 */
export const readUsersMeUsersMeGet = <ThrowOnError extends boolean = false>(options?: Options<ReadUsersMeUsersMeGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ReadUsersMeUsersMeGetResponses, unknown, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/me',
        ...options
    });
};

/**
 * List Users
 */
export const listUsersUsersGet = <ThrowOnError extends boolean = false>(options?: Options<ListUsersUsersGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListUsersUsersGetResponses, ListUsersUsersGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/users/',
        ...options
    });
};

/**
 * Get User
 */
export const getUserUsersUsernameGet = <ThrowOnError extends boolean = false>(options: Options<GetUserUsersUsernameGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserUsersUsernameGetResponses, GetUserUsersUsernameGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/users/{username}',
        ...options
    });
};

/**
 * List Rooms
 */
export const listRoomsRoomsGet = <ThrowOnError extends boolean = false>(options?: Options<ListRoomsRoomsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListRoomsRoomsGetResponses, ListRoomsRoomsGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/rooms/',
        ...options
    });
};

/**
 * Create Room
 */
export const createRoomRoomsPost = <ThrowOnError extends boolean = false>(options: Options<CreateRoomRoomsPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateRoomRoomsPostResponses, CreateRoomRoomsPostErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/rooms/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete Room
 */
export const deleteRoomRoomsRoomIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteRoomRoomsRoomIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteRoomRoomsRoomIdDeleteResponses, DeleteRoomRoomsRoomIdDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/rooms/{room_id}',
        ...options
    });
};

/**
 * Get Room
 */
export const getRoomRoomsRoomIdGet = <ThrowOnError extends boolean = false>(options: Options<GetRoomRoomsRoomIdGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetRoomRoomsRoomIdGetResponses, GetRoomRoomsRoomIdGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/rooms/{room_id}',
        ...options
    });
};

/**
 * Update Room
 */
export const updateRoomRoomsRoomIdPatch = <ThrowOnError extends boolean = false>(options: Options<UpdateRoomRoomsRoomIdPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateRoomRoomsRoomIdPatchResponses, UpdateRoomRoomsRoomIdPatchErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/rooms/{room_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List Room Members
 */
export const listRoomMembersRoomsRoomIdMembersGet = <ThrowOnError extends boolean = false>(options: Options<ListRoomMembersRoomsRoomIdMembersGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListRoomMembersRoomsRoomIdMembersGetResponses, ListRoomMembersRoomsRoomIdMembersGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/rooms/{room_id}/members',
        ...options
    });
};

/**
 * Join Room
 */
export const joinRoomRoomsRoomIdJoinPost = <ThrowOnError extends boolean = false>(options: Options<JoinRoomRoomsRoomIdJoinPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<JoinRoomRoomsRoomIdJoinPostResponses, JoinRoomRoomsRoomIdJoinPostErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/rooms/{room_id}/join',
        ...options
    });
};

/**
 * Leave Room
 */
export const leaveRoomRoomsRoomIdLeaveDelete = <ThrowOnError extends boolean = false>(options: Options<LeaveRoomRoomsRoomIdLeaveDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<LeaveRoomRoomsRoomIdLeaveDeleteResponses, LeaveRoomRoomsRoomIdLeaveDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/rooms/{room_id}/leave',
        ...options
    });
};

/**
 * List Room Messages
 */
export const listRoomMessagesRoomsRoomIdMessagesGet = <ThrowOnError extends boolean = false>(options: Options<ListRoomMessagesRoomsRoomIdMessagesGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListRoomMessagesRoomsRoomIdMessagesGetResponses, ListRoomMessagesRoomsRoomIdMessagesGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/rooms/{room_id}/messages',
        ...options
    });
};

/**
 * Delete Message
 */
export const deleteMessageRoomsRoomIdMessagesMessageIdDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteMessageRoomsRoomIdMessagesMessageIdDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteMessageRoomsRoomIdMessagesMessageIdDeleteResponses, DeleteMessageRoomsRoomIdMessagesMessageIdDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/rooms/{room_id}/messages/{message_id}',
        ...options
    });
};

/**
 * Edit Message
 */
export const editMessageRoomsRoomIdMessagesMessageIdPatch = <ThrowOnError extends boolean = false>(options: Options<EditMessageRoomsRoomIdMessagesMessageIdPatchData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<EditMessageRoomsRoomIdMessagesMessageIdPatchResponses, EditMessageRoomsRoomIdMessagesMessageIdPatchErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/rooms/{room_id}/messages/{message_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get Room By Name
 */
export const getRoomByNameRoomsByNameRoomNameGet = <ThrowOnError extends boolean = false>(options: Options<GetRoomByNameRoomsByNameRoomNameGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetRoomByNameRoomsByNameRoomNameGetResponses, GetRoomByNameRoomsByNameRoomNameGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/rooms/by-name/{room_name}',
        ...options
    });
};

/**
 * Get Room Presence
 */
export const getRoomPresenceRoomsRoomIdPresenceGet = <ThrowOnError extends boolean = false>(options: Options<GetRoomPresenceRoomsRoomIdPresenceGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetRoomPresenceRoomsRoomIdPresenceGetResponses, GetRoomPresenceRoomsRoomIdPresenceGetErrors, ThrowOnError>({
        responseType: 'json',
        url: '/rooms/{room_id}/presence',
        ...options
    });
};

/**
 * Toggle Moderator
 */
export const toggleModeratorRoomsRoomIdMembersTargetUserIdModeratorPost = <ThrowOnError extends boolean = false>(options: Options<ToggleModeratorRoomsRoomIdMembersTargetUserIdModeratorPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ToggleModeratorRoomsRoomIdMembersTargetUserIdModeratorPostResponses, ToggleModeratorRoomsRoomIdMembersTargetUserIdModeratorPostErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/rooms/{room_id}/members/{target_user_id}/moderator',
        ...options
    });
};

/**
 * Toggle Ban
 */
export const toggleBanRoomsRoomIdMembersTargetUserIdBanPost = <ThrowOnError extends boolean = false>(options: Options<ToggleBanRoomsRoomIdMembersTargetUserIdBanPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ToggleBanRoomsRoomIdMembersTargetUserIdBanPostResponses, ToggleBanRoomsRoomIdMembersTargetUserIdBanPostErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/rooms/{room_id}/members/{target_user_id}/ban',
        ...options
    });
};

/**
 * Toggle Mute
 */
export const toggleMuteRoomsRoomIdMembersTargetUserIdMutePost = <ThrowOnError extends boolean = false>(options: Options<ToggleMuteRoomsRoomIdMembersTargetUserIdMutePostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ToggleMuteRoomsRoomIdMembersTargetUserIdMutePostResponses, ToggleMuteRoomsRoomIdMembersTargetUserIdMutePostErrors, ThrowOnError>({
        responseType: 'json',
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/rooms/{room_id}/members/{target_user_id}/mute',
        ...options
    });
};